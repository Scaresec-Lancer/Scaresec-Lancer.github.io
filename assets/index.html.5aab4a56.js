import{_ as s,o as n,c as a,a as e}from"./app.7397d0ca.js";const p={},t=e(`<blockquote><p>Docker 的 Mysql 镜像启动参数：</p><p>设置 MYSQL_USER、MYSQL_PASSWORD、MYSQL_ROOT_PASSWORD，3306端口与本地3306绑定。</p></blockquote><h2 id="_1-1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-1-基础知识" aria-hidden="true">#</a> 1.1 基础知识</h2><h3 id="_1-1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-1-概述" aria-hidden="true">#</a> 1.1.1 概述</h3><p>数据库是按照数据结构来组织、存储和管理数据的仓库，可以进行增加、删除、修改、查找等操作。数据不仅包括数字，还包括文字、图像、声音等。</p><p>数据库系统的几个重要部分：</p><ul><li>数据库。数据库提供了一个存储空间用来存储各种数据，可以将数据库视为一个存储数据的容器。</li><li>数据库管理系统。专门用于创建和管理数据库的一套软件，介于应用程序和操作系统之间，如 MySQL、Oracle、SQL Server、DB2 等。数据库管理系统不仅具有最基本的数据管理功能，还能保证数据的完整性、安全性和可靠性。</li><li>数据库应用程序。虽然已经有了数据库管理系统，但在很多情况下，数据库管理系统无法满足用户对数据库的管理。此时，就需要使用数据库应用程序与数据库管理系统进行通信、访问和管理 DBMS 中存储的数据。</li></ul><h3 id="_1-1-2-技术发展" tabindex="-1"><a class="header-anchor" href="#_1-1-2-技术发展" aria-hidden="true">#</a> 1.1.2 技术发展</h3><p><strong>1、人工管理阶段</strong></p><p>20世纪50年代以前，计算机主要用于科学计算，硬件方面没有磁盘等直接存取设备，只有磁带、卡片和纸带；软件方面没有操作系统和管理数据的软件。数据的输入、存取等，需要人工操作。人工阶段麻烦和低效，该阶段特点：</p><ul><li>数据不在计算机中长期保存</li><li>没有专门的数据管理软件，数据需要应用程序自己管理</li><li>数据是面向应用程序的，不同应用程序之间无法共享数据</li><li>数据不具有独立性，完全依赖于应用程序。</li></ul><p><strong>2、文件系统阶段</strong></p><p>20世纪60年代中期，硬件方面有了磁盘等直接存取设备，软件方面有了操作系统，数据管理进入了文件系统阶段。这个阶段，数据以文件为单位保存在外存上，由操作系统管理，程序和数据分离，实现了以文件为单位的数据共享。文件系统阶段具有如下特点：</p><ul><li>数据在计算机的外存上长期保存，可以对数据反复进行操作</li><li>通过文件系统管理数据，文件系统提供了文件管理功能和存取方法</li><li>虽然在一定程度上实现了数据独立性和共享性，但都非常薄弱</li></ul><p><strong>3、数据库系统阶段</strong></p><p>从20世纪60年代后期开始，计算机应用广泛，管理的数据量越来越多，多种应用程序数据共享的需求强烈，文件系统的管理方式已经无法满足需求。为了提高数据管理的效率，解决多用户、多应用程序共享数据的需求，数据库技术应运而生，由此进入了数据库系统阶段。数据库系统阶段具有如下特点。</p><ul><li>数据结构化。数据库系统实现了整体数据的结构化。整体结构化，是指在数据库中的数据不只是针对某个应用程序，而是面向整体的</li><li>数据共享。因为数据是面向整体的，可被多个用户、多个应用程序共享使用，大幅度地减少数据冗余，节约存储空间，避免数据之间的不相容性与不一致性。</li><li>数据独立性高。包含逻辑独立性和物理独立性。逻辑独立性指数据库中数据的逻辑结构和应用程序相互独立，物理独立性是指数据物理结构的变化不影响数据的逻辑结构。</li><li>数据统一管理与控制。包含安全控制、完整控制和并发控制。简单来说就是防止数据丢失、确保数据正确有效，并且在同一时间内，允许用户对数据进行多路存取，防止用户之间的异常交互。</li></ul><h3 id="_1-1-3-三级模式和二级映像" tabindex="-1"><a class="header-anchor" href="#_1-1-3-三级模式和二级映像" aria-hidden="true">#</a> 1.1.3 三级模式和二级映像</h3><p>三级模式是指数据库管理系统从三个层次来管理数据，分别是外部层、概念层和内部层。这三个层次分别对应三种不同类型的模式，分别是外模式、概念模式和内模式。在外模式与慨念模式之间，以及概念模式与内模式之间，还存在映像，即二级映像</p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026213120828.png" alt="image-20221026213120828"></p><p>在图1-2中，外模式面向应用程序，描述用户的数据视图(View);内模式（又称为物理模式、存储模式)面向物理上的数据库，描述数据在磁盘中如何存储：概念模式（又称为模式、逻辑模式)面向数据库设计人员，描述数据的整体逻辑结构。</p><p>由于三级模式比较抽象，为了更好地理解，下面将计算机中常用的Excl电子表格类比成数据库，并假设有一个商城使用电子表格来保存商品信息。</p><table><thead><tr><th>编号</th><th>商品名称</th><th>商品分类</th><th>商品价格</th><th>库存</th><th>销量</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>概念模式。概念模式类似于表格的列标题，它描述了商品表中包含哪些信息。表的横向称为行，纵向称为列，第一行就是列标题，用来描述该列的数据表示什么含义。</li><li>内模式。在将Excl表格另存为文件时，可以选择保存的文件路径、保存类型（如XLS、XLSX、CSV等格式)等，这些与存储相关的描述信息相当于内模式。在数据库中，内模式描述数据的物理结构和存储方式，如堆文件、索引文件、散列(Hash)文件等</li><li>外模式。在打开一个电子表格后，默认会显示表格中所有的数据，这个表格称为基本表。在将数据提供给其他用户时，出于权限、安全控制等因素的考虑，只允许用户看到一部分数据，或不同用户看到不同的数据，这样的需求就可以用视图来实现。</li></ul><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026213426233.png" alt="image-20221026213426233"></p><p>基本表中的数据是实际存储在数据库中的，而视图中的数据是查询或计算出来的。由此可见，外模式可以为不同用户的需求创建不同的视图，且由于不同用户的需求不同，数据的显示方式也会多种多样。因此，一个数据库中会有多个外模式，而概念模式和内模式则只有一个。</p><p>通过前面的分析可知，三级模式是数据的三个抽象级别，每个级别关心的重点不同。为了使三级模式之间产生关联，数据库管理系统在三级模式之间提供了二级映像功能。二级映像是一种规则，它规定了映像双方如何进行转换。通过二级映像，体现了逻楫和物理两个层面的数据独立性。具体解释如下。</p><ul><li>逻辑独立性。外模式/概念模式映像体现了逻辑独立性。逻辑独立性是指当修改了概念模式，不影响其上一层的外模式。例如，将图1-4中基本表的“库存”和“销量”拆分到另一张表中，此时概念模式发生了更改，但可以通过改变外模式/概念模式的映像，继续为用户提供原有的视图，如图1-5所示。</li></ul><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026213519482.png" alt="image-20221026213519482"></p><p>由此可见，逻辑独立性能够让使用视图的用户感觉不到基本表的改变。其实，逻辑独立性带来的好处还有很多，随着后面的学习，读者会有更深入的体会。</p><p>(2)物理独立性。概念模式/内模式映像体现了物理独立性。物理独立性是指修改了内模式，不影响其上层的概念模式和外模式。例如，在Excl中将.xls文件另存为.xlsx文件，虽然更换了文件格式，但是打开文件后显示的表格内容一般不会发生改变。</p><h3 id="_1-1-4-数据模型" tabindex="-1"><a class="header-anchor" href="#_1-1-4-数据模型" aria-hidden="true">#</a> 1.1.4 数据模型</h3><h3 id="_1-1-5-关系运算" tabindex="-1"><a class="header-anchor" href="#_1-1-5-关系运算" aria-hidden="true">#</a> 1.1.5 关系运算</h3><p>关系模型可以使用关系代数来进行关系运算。关系代数是一种抽象的查询语言，是研究关系模型的数学工具。关系代数运算符主要包括并、差、交、笛卡儿积、选择、投影、连接和除</p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026224159595.png" alt="image-20221026224159595"></p><p><strong>1、并、差、交</strong></p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026224513325.png" alt="image-20221026224513325"></p><p><strong>2、笛卡尔积</strong></p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026224501188.png" alt="image-20221026224501188"></p><p><strong>3、选择、投影</strong></p><p>选择是在一个关系中将满足条件的元组找出来，即水平方向筛选；投影是在一个关系中去掉不需要的属性，保留需要的属性，即垂直方向筛选。</p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026224446521.png" alt="image-20221026224446521"></p><p><strong>4、连接</strong></p><p>连接是在两个关系的笛卡儿积中选取属性间满足一定条件的元组。由于笛卡儿积的结果可能会包含很多没有意义的元组，所以相比之下连接运算更为实用。</p><p>常用的连接方式有等值连接(Equi-Join)和自然连接(Natural Join)。设有关系R和关系S,使用A和B分别表示R和S中数目相等且可比的属性组。等值连接是在R和S的笛卡儿积中选取A、B属性值相等的元组。自然连接是一种特殊的等值连接，要求R和S必须有相同的属性组，进行等值连接后再去除重复的属性组。</p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026224427979.png" alt="image-20221026224427979"></p><p><strong>5、除</strong></p><p>如果把笛卡儿积看作乘法运算，则除法是笛卡儿积的逆运算。设有关系R和关系S,除运算需满足S的属性集是R属性集的真子集，R÷S的结果是R属性集成去S属性集的结果。例如，R(A,B,C,D)÷S(C,D)的结果由A和B两个属性构成。</p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221026224551423.png" alt="image-20221026224551423"></p><h3 id="_1-1-6-sql-语言" tabindex="-1"><a class="header-anchor" href="#_1-1-6-sql-语言" aria-hidden="true">#</a> 1.1.6 SQL 语言</h3><p>结构化查询语言SQL是一种数据库查询语言和程序设计语言，主要用于管理数据库中的数据，如存取数据、查询数据、更新数据等。</p><p>SQL是由4部分组成的，具体如下。</p><ul><li>数据定义语言(Data Definition Language,DDl)。数据库定义语言主要用于定义数据库、表等。例如，CREATE语句用于创建数据库、数据表等，ALTER语句用于修改表的定义等，DROP语句用于删除数据库、删除表等。</li><li>数据操作语言(Data Manipulation Language,DML)。数据操作语言主要用于对数据库进行添加、修改和删除操作。例如，INSERT语句用于插入数据，UPDATE语句用于修改数据，DELETE语句用于删除数据。</li><li>数据查询语言(Data Query Language,DQL)。数据查询语言主要用于查询数据。例如，使用SELECT语句可以查询数据库中的一条数据或多条数据。</li><li>数据控制语言(Data Control Language,DCL)。数据控制语言主要用于控制用户的访问权限。例如，GRANT语句用于给用户增加权限，REVOKE语句用于收回用户的权限，COMMIT语句用于提交事务，ROLLBACK语句用于回滚事务。</li></ul><h2 id="_1-2-mysql-安装与配置" tabindex="-1"><a class="header-anchor" href="#_1-2-mysql-安装与配置" aria-hidden="true">#</a> 1.2 Mysql 安装与配置</h2><p>在撰写本文时，Ubuntu存储库中可用的MySQL的最新版本是MySQL 8.0。要安装它，请运行以下命令：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>sudo apt update
sudo apt install mysql-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，MySQL服务将自动启动。要验证MySQL服务器正在运行，请输入：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>sudo systemctl status mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出应显示该服务已启用并正在运行：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>● mysql.service - MySQL Community Server
 Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)
 Active: active (running) since Tue 2020-04-28 20:59:52 UTC; 10min ago
 Main PID: 8617 (mysqld)
 Status: &quot;Server is operational&quot;
 ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保护mysql" tabindex="-1"><a class="header-anchor" href="#保护mysql" aria-hidden="true">#</a> 保护MySQL</h3><p>MySQL安装随附一个名为的脚本<code>mysql_secure_installation</code>，可让您轻松提高数据库服务器的安全性。</p><p>调用不带参数的脚本：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>sudo mysql_secure_installation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>系统将要求您配置<code>VALIDATE PASSWORD PLUGIN</code>用来测试MySQL用户密码强度并提高安全性的密码：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>Securing the MySQL server deployment.

Connecting to MySQL using a blank password.

VALIDATE PASSWORD COMPONENT can be used to test passwords
and improve security. It checks the strength of password
and allows the users to set only those passwords which are
secure enough. Would you like to setup VALIDATE PASSWORD component?

Press y|Y for Yes, any other key for No: y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>密码验证策略分为三个级别：低，中和强。按下<code>y</code>如果你想设置的验证密码插件或任何其他键移动到下一个步骤：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>There are three levels of password validation policy:

LOW Length &gt;= 8
MEDIUM Length &gt;= 8, numeric, mixed case, and special characters
STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary file

Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下一个提示符下，将要求您设置MySQL root用户的密码：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>Please set the password for root here.


New password: 

Re-enter new password:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您设置了验证密码插件，该脚本将向您显示新密码的强度。键入<code>y</code>以确认密码：</p><div class="language-markup line-numbers-mode" data-ext="markup"><pre class="language-markup"><code>Estimated strength of the password: 50 
Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，将要求您删除匿名用户，限制root用户对本地计算机的访问，删除测试数据库并重新加载特权表。您应该回答<code>y</code>所有问题。</p><h2 id="_2-1-数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-数据库" aria-hidden="true">#</a> 2.1 数据库</h2><h3 id="_2-1-1-创建数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-1-创建数据库" aria-hidden="true">#</a> 2.1.1 创建数据库</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> mydb<span class="token punctuation">;</span>  <span class="token comment">#创建名为mydb的数据库</span>
<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> mydb<span class="token punctuation">;</span> <span class="token comment">#如果名为mydb的数据库不存在的话，创建它</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库名称是由【字母、数字和下划线】组成的，库选项有：字符集 charset、校对集 collate</p><h3 id="_2-1-2-查看数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-2-查看数据库" aria-hidden="true">#</a> 2.1.2 查看数据库</h3><p><strong>1、查看 Mysql 服务器下所有数据库</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show databases<span class="token punctuation">;</span>
+--------------------+
<span class="token operator">|</span> Database           <span class="token operator">|</span>
+--------------------+
<span class="token operator">|</span> information_schema <span class="token operator">|</span>
<span class="token operator">|</span> mysql              <span class="token operator">|</span>
<span class="token operator">|</span> performance_schema <span class="token operator">|</span>
<span class="token operator">|</span> sys                <span class="token operator">|</span>
+--------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>information_schema 和 performance_schema 分别是 MySQL 服务器的数据字典（保存所有数据表和库的结构信息）和性能字典（保存全局变量等的设置）。mysql 数据库主要负责 MySQL 服务器自己需要使用的控制和管理信息，如用户的权限关系等；sys 是系统数据库，包括了存储过程、自定义函数等信息。</p><p><strong>2、查看指定数据库的创建信息</strong></p><p>以下显示了创建 mydb 数据库的 SQL 语句、数据库的默认字符集。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show create database mydb<span class="token punctuation">;</span>
+----------+--------------------------------------------------------------------------------------------------------------------------------+
<span class="token operator">|</span> Database <span class="token operator">|</span> Create Database
                    <span class="token operator">|</span>
+----------+--------------------------------------------------------------------------------------------------------------------------------+
<span class="token operator">|</span> mydb     <span class="token operator">|</span> CREATE DATABASE <span class="token variable"><span class="token variable">\`</span>mydb<span class="token variable">\`</span></span> /*<span class="token operator">!</span><span class="token number">40100</span> DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*<span class="token operator">!</span><span class="token number">80016</span> DEFAULT <span class="token assign-left variable">ENCRYPTION</span><span class="token operator">=</span><span class="token string">&#39;N&#39;</span> */ <span class="token operator">|</span>
+----------+--------------------------------------------------------------------------------------------------------------------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-3-选择数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-3-选择数据库" aria-hidden="true">#</a> 2.1.3 选择数据库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> use mydb<span class="token punctuation">;</span>
Database changed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>登录MySQL服务器时选择数据库</strong></p><p>数据库的选择除了可以使用USE关键字外，在用户登录MySQL服务器时也可以直接选择要操作的数据库，基本语法格式如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#登陆时显示用户密码，选择数据库</span>
mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token number">123456</span> mydb

<span class="token comment">#登陆时隐藏密码，选择数据库</span>
mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> mydb
Enter password:******
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-4-删除数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-4-删除数据库" aria-hidden="true">#</a> 2.1.4 删除数据库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> drop database mydb<span class="token punctuation">;</span>    <span class="token comment">#删除数据库mydb，如果mydb不存在会报错</span>
mysql<span class="token operator">&gt;</span> drop database <span class="token keyword">if</span> exists mydb<span class="token punctuation">;</span>  <span class="token comment">#删除数据库mydb，不存在不会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注释</strong></p><p>MySQL中的注释通常可以分为两类：一类是将注释内容添加到表结构中，另一类则会在服务器实际运行时被忽略，有单行注释和多行注释之分。</p><p>单行注释以<code>#</code>开始标识，也支持标准SQL中<code>--</code>单行注释。为了防止<code>--</code>与SQL语句中负号和减法运算的混淆，在第二个短横线后必须添加至少一个控制字符（如空格、制表符、换行符等）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#此处填写单行注释内容，如：若服务器中没有mydb数据库，则创建，否则忽略此SQL</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> mydb<span class="token punctuation">;</span>

<span class="token comment">-- 此处填写单行注释内容，如：若服务器中存在myb数据库，则删除，否则忽略此SQL</span>
<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> mydb<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL也支持标准SQL中的多行注释<code>/*此处填写注释内容*/</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
  此处填写注释内容
*/</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-数据表" tabindex="-1"><a class="header-anchor" href="#_2-2-数据表" aria-hidden="true">#</a> 2.2 数据表</h2><h3 id="_2-2-1-创建数据表" tabindex="-1"><a class="header-anchor" href="#_2-2-1-创建数据表" aria-hidden="true">#</a> 2.2.1 创建数据表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token punctuation">(</span>字段名 字段类型 <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>表属性<span class="token punctuation">]</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> goods<span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">&#39;bianhao&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;shangpinming&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> price <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">&#39;jiage&#39;</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，在操作数据表时，可以不使用“USE选择数据库”的方式选择数据库，直接将表名的位置改为“数据库.表名”的形式，就可以在任何数据库下访问其他数据库中的表。例如，省略以上第②步的操作，将第③步创建g00ds数据表的语句修改成如下形式。<code>create table mydb.goods (字段定义);</code></p><h3 id="_2-2-2-查看数据表" tabindex="-1"><a class="header-anchor" href="#_2-2-2-查看数据表" aria-hidden="true">#</a> 2.2.2 查看数据表</h3><p><strong>1、查看数据表</strong></p><p>上述语法中，若不添加可选项<code>LIKE匹配模式</code>，表示查看当前数据库中的所有数据表：若添加则按照“匹配模式”查看数据表。其中，匹配模式符有两种，分别为<code>%</code>和<code>_</code>。前者表示匹配一个或多个字符，代表任意长度的字符串，长度也可以为0，后者仅可以匹配一个字符。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token punctuation">[</span><span class="token operator">LIKE</span>匹配模式<span class="token punctuation">]</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> <span class="token comment">#查看所有数据表</span>
<span class="token operator">+</span><span class="token comment">----------------+</span>
<span class="token operator">|</span> Tables_in_wang <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------+</span>
<span class="token operator">|</span> goods          <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------+</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">&#39;%ood%&#39;</span><span class="token punctuation">;</span> <span class="token comment">#查看数据表和名称中含有ood的数据表</span>
<span class="token operator">+</span><span class="token comment">------------------------+</span>
<span class="token operator">|</span> Tables_in_wang <span class="token punctuation">(</span><span class="token operator">%</span>ood<span class="token operator">%</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+</span>
<span class="token operator">|</span> goods                  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、查看数据表的相关信息</strong></p><p>除了查看数据库下有哪些数据表外，还可以利用MySQL提供的SQL语句查看数据表的相关信息，如数据表的名称、存储引擎、创建时间等，基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token punctuation">[</span><span class="token keyword">FROM</span>数据库名<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">LIKE</span>匹配模式<span class="token punctuation">]</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token keyword">from</span> wang <span class="token operator">like</span> <span class="token string">&#39;%ood%&#39;</span>\\G<span class="token punctuation">;</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
           Name: goods
         <span class="token keyword">Engine</span>: <span class="token keyword">InnoDB</span> <span class="token comment">#数据表的存储引擎</span>
        Version: <span class="token number">10</span> <span class="token comment">#数据表的结构文件</span>
     Row_format: Dynamic <span class="token comment">#记录的存储格式</span>
           <span class="token keyword">Rows</span>: <span class="token number">0</span>
 Avg_row_length: <span class="token number">0</span>
    Data_length: <span class="token number">16384</span> <span class="token comment">#数据文件的长度，字节为单位</span>
Max_data_length: <span class="token number">0</span>
   Index_length: <span class="token number">0</span>
      Data_free: <span class="token number">0</span>
 <span class="token keyword">Auto_increment</span>: <span class="token boolean">NULL</span>
    Create_time: <span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">07</span>:<span class="token number">33</span>:<span class="token number">01</span> <span class="token comment">#创建时间</span>
    Update_time: <span class="token boolean">NULL</span>
     Check_time: <span class="token boolean">NULL</span>
      Collation: utf8mb4_0900_ai_ci <span class="token comment">#校对集</span>
       Checksum: <span class="token boolean">NULL</span>
 Create_options:
        <span class="token keyword">Comment</span>:
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-3-修改数据表" tabindex="-1"><a class="header-anchor" href="#_2-2-3-修改数据表" aria-hidden="true">#</a> 2.2.3 修改数据表</h3><p><strong>1、修改数据表名称</strong></p><p>在MySQL中，提供了两种修改数据表名称的方式，基本语法格式如下。ALTER TABLE修改数据表名称时，可以直接使用RENAME或在其后添加TO或AS。而RENAME TABLE则必须使用TO,另外此语法可以同时修改多个数据表的名称。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 旧表名 <span class="token keyword">rename</span> <span class="token punctuation">[</span><span class="token keyword">to</span><span class="token operator">|</span><span class="token keyword">as</span><span class="token punctuation">]</span> 新表名<span class="token punctuation">;</span> <span class="token comment">#语法1</span>
<span class="token keyword">rename</span> <span class="token keyword">table</span> 旧表名<span class="token number">1</span> <span class="token keyword">to</span> 新表名<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>旧表名<span class="token number">2</span> <span class="token keyword">to</span> 新表名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">#语法2</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">rename</span> <span class="token keyword">table</span> goods <span class="token keyword">to</span> new_goods<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、修改表选项</strong></p><p>数据表中的表选项字符集、存储引擎以及校对集也可以通过ALTER TABLE修改，基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 表选项 <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> 值<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> new_goods <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span> <span class="token comment">#修改字符集为utf8</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-4-查看表结构" tabindex="-1"><a class="header-anchor" href="#_2-2-4-查看表结构" aria-hidden="true">#</a> 2.2.4 查看表结构</h3><p><strong>1、查看字段信息</strong></p><p>MySQL提供的DESCRIBE语句可以查看数据表中所有字段或指定字段的信息，包字段名、字段类型等。其中，DESCRIBE语句可以简写成DESC。基木语法格式如下。</p><p>在上述执行结果中，Fild表示字段名称，Type表示字段的数据类型，Null表示该字段是否可以为空，Key表示该字段是否已设置了索引，Default表示该字段是否有默认值，Extra表示获取到的与该字段相关的附加信息。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>{<span class="token keyword">describe</span> <span class="token operator">|</span> <span class="token keyword">desc</span>}数据表名<span class="token punctuation">;</span> <span class="token comment">#查看所有字段的信息</span>
{<span class="token keyword">describe</span> <span class="token operator">|</span> <span class="token keyword">desc</span>}数据表名 字段名；<span class="token comment">#查看指定字段信息</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> new_goods<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span>         <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> price <span class="token operator">|</span> <span class="token keyword">int</span>         <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、查看数据表的创建语句</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> new_goods \\G<span class="token punctuation">;</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
       <span class="token keyword">Table</span>: new_goods
<span class="token keyword">Create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>new_goods<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;bianhao&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;shangpinming&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>price<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;jiage&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、查看数据表结构</strong></p><p>MySQL数据库中的SHOW COLUMNS语句也可以查看表结构，基本语法格式如下。</p><p>在上述语法格式中，可选项FULL表示显示详细内容，在不添加的情况下查询结果与DESC的结果相同；在添加FUII选项时此语句不仅可以查看到DESC语句查看的信息，还可以查看到字段的权限、COMMENT字段的注释信息等。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">full</span><span class="token punctuation">]</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> 数据库名 <span class="token punctuation">[</span><span class="token keyword">from</span> 数据库名<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">full</span><span class="token punctuation">]</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> 数据库名<span class="token punctuation">.</span>数据表名<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">full</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> new_goods<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+-------------+--------------------+------+-----+---------+-------+---------------------------------+--------------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> Collation          <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span> <span class="token keyword">Privileges</span>                      <span class="token operator">|</span> <span class="token keyword">Comment</span>      <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+-------------+--------------------+------+-----+---------+-------+---------------------------------+--------------+</span>
<span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span>         <span class="token operator">|</span> <span class="token boolean">NULL</span>               <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">references</span> <span class="token operator">|</span> bianhao      <span class="token operator">|</span>
<span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> utf8mb4_0900_ai_ci <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">references</span> <span class="token operator">|</span> shangpinming <span class="token operator">|</span>
<span class="token operator">|</span> price <span class="token operator">|</span> <span class="token keyword">int</span>         <span class="token operator">|</span> <span class="token boolean">NULL</span>               <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">references</span> <span class="token operator">|</span> jiage        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+-------------+--------------------+------+-----+---------+-------+---------------------------------+--------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-5-修改表结构" tabindex="-1"><a class="header-anchor" href="#_2-2-5-修改表结构" aria-hidden="true">#</a> 2.2.5 修改表结构</h3><p><strong>1、修改字段名</strong></p><p>在上述语法中，“旧字段名”指的是字段修改前的名称，“新字段名”指的是字段修改后的 名称。“数据类型”表示新字段名的数据类型，不能为空，即使与旧字段的数据类型相同，也必须重新设置。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 数据表名 change <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> 旧字段名 新字段名 字段类型 <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> new_goods change name Sno_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.08</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、修改字段类型</strong></p><p>在MySQL中仅修改数据表中的字段类型，通常使用MODIFY实现</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 数据表名 <span class="token keyword">modify</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> 字段名 新类型 <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> new_goods <span class="token keyword">modify</span> price <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.08</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、修改字段的位置</strong></p><p>数据表在创建时，字段编写的先后顺序就是其在数据库中存储的顺序，若需要调整某个字段的位置，也可以使用MODIFY实现，基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 数据表名 <span class="token keyword">modify</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> 字段名<span class="token number">1</span> 数据类型 <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">first</span><span class="token operator">|</span><span class="token keyword">after</span> 字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> new_goods <span class="token keyword">modify</span> id <span class="token keyword">int</span> <span class="token keyword">after</span> price<span class="token punctuation">;</span> <span class="token comment">#id移到price后</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.07</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、新增字段</strong></p><p>对于已经创建好的数据表，也可以根据业务需求利用 ADD 新增字段，基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 数据表名 <span class="token keyword">add</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> 新字段名 字段类型 <span class="token punctuation">[</span><span class="token keyword">first</span><span class="token operator">|</span><span class="token keyword">after</span> 字段名<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment"># 新建一个字段，可指定其位置</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> 数据表名 <span class="token keyword">add</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>新字段名<span class="token number">1</span> 字段类型<span class="token number">1</span>，新字段名<span class="token number">2</span> 字段类型<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#同时新增多个字段</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> new_goods <span class="token keyword">add</span> num <span class="token keyword">int</span> <span class="token keyword">after</span> price<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5、删除字段</strong></p><p>将某个字段从数据表中删除，通过DROP完成。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 数据表名 <span class="token keyword">drop</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> 字段名<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> new_goods <span class="token keyword">drop</span> num<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-6-删除数据表" tabindex="-1"><a class="header-anchor" href="#_2-2-6-删除数据表" aria-hidden="true">#</a> 2.2.6 删除数据表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token punctuation">[</span><span class="token keyword">temporary</span><span class="token punctuation">]</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 数据表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>数据表<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> Student<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-数据" tabindex="-1"><a class="header-anchor" href="#_2-3-数据" aria-hidden="true">#</a> 2.3 数据</h2><h3 id="_2-3-1-添加数据" tabindex="-1"><a class="header-anchor" href="#_2-3-1-添加数据" aria-hidden="true">#</a> 2.3.1 添加数据</h3><p>通常情况下，要想操作数据表中的数据，首先要保证数据表中存在数据。MySQL中使用INSERT语句向数据表中添加数据。根据操作的不同目的一般可以分为两种，一种是为所有字段添加数据，另一种是为部分字段添加数据。下面将对这两种操作进行详细讲解。</p><p><strong>1、为所有字段添加数据</strong></p><p>在MySQL中，为所有字段插入记录时，可以省略字段名称，严格按照数据表结构（字段的位置)插入对应的值，基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token punctuation">[</span><span class="token keyword">into</span><span class="token punctuation">]</span> 数据表名 {<span class="token keyword">values</span><span class="token operator">|</span><span class="token keyword">value</span>}{值<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>}<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> new_goods
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;notebook&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1998&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在MySQL中，若创建的数据表未指定字符集，则数据表及表中的字段将使用默认的字符集latinl。因此，若用户插入的数据中含有中文，则会出现错误提示。为了解决以上中文插入的问题，通常在创建数据表时添加表选项，设置数据表的字符集</p><p>另外，对于已经添加数据的数据表，则可以通过ALTER TABLE·CHANGEM○DIFY完成对表字段字符集的设置</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token keyword">temporary</span><span class="token punctuation">]</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 表名
<span class="token punctuation">(</span>字段名 字段类型 <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token punctuation">]</span> {<span class="token keyword">character</span> <span class="token keyword">set</span><span class="token operator">|</span><span class="token keyword">charset</span>}<span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span>utf8<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> new_goods
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">modify</span> Sno_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">modify</span> price <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">warnings</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、为部分字段添加数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token punctuation">[</span><span class="token keyword">into</span><span class="token punctuation">]</span> 数据表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
{<span class="token keyword">values</span><span class="token operator">|</span><span class="token keyword">value</span>} <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> new_goods <span class="token punctuation">(</span>id<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;2996&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，MySQL中还提供了另外一种使用INSERT语句为指定字段添加数据的方式。基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token punctuation">[</span><span class="token keyword">into</span><span class="token punctuation">]</span> 数据表名
<span class="token keyword">set</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> new_goods <span class="token keyword">set</span> price<span class="token operator">=</span><span class="token string">&#39;1000&#39;</span><span class="token punctuation">,</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、一次添加多行数据</strong></p><p>在实际开发中，向一张数据表中同时插入多条记录时，重复地书写以上INSERT指令，操作不仅烦琐，又不便于阅读。因此，可以使用MySQL提供的另外一种插入数据的语法完成多数据插入。基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token punctuation">[</span><span class="token keyword">into</span><span class="token punctuation">]</span> 数据表名 <span class="token punctuation">[</span><span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span><span class="token punctuation">]</span>
{<span class="token keyword">values</span><span class="token operator">|</span><span class="token keyword">value</span>}<span class="token punctuation">(</span>值列表<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值列表<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> new_goods <span class="token keyword">values</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;66&#39;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;77&#39;</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token string">&#39;io&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;88&#39;</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，在多数据插入时，若一条数据插入失败，则整个插入语句都会失败。</p><h3 id="_2-3-2-查询数据" tabindex="-1"><a class="header-anchor" href="#_2-3-2-查询数据" aria-hidden="true">#</a> 2.3.2 查询数据</h3><p><strong>1、查询表中全部数据</strong></p><p>查询数据表中所有字段的数据，可以使用星号<code>*</code>通配符代替数据表中的所有字段名，基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 数据表名<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> new_goods<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+-------+------+</span>
<span class="token operator">|</span> Sno_name <span class="token operator">|</span> price <span class="token operator">|</span> id   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-------+------+</span>
<span class="token operator">|</span> code     <span class="token operator">|</span> <span class="token number">66</span>    <span class="token operator">|</span>    <span class="token number">6</span> <span class="token operator">|</span>
<span class="token operator">|</span> net      <span class="token operator">|</span> <span class="token number">77</span>    <span class="token operator">|</span>    <span class="token number">8</span> <span class="token operator">|</span>
<span class="token operator">|</span> io       <span class="token operator">|</span> <span class="token number">88</span>    <span class="token operator">|</span>    <span class="token number">9</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-------+------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、查询表中部分字段</strong></p><p>查询数据时，可在SELECT语句的字段列表中指定要查询的字段。基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> {字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>} <span class="token keyword">from</span> 数据库名<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>price <span class="token keyword">from</span> new_goods<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+-------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> price <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------+</span>
<span class="token operator">|</span>    <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">66</span>    <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">8</span> <span class="token operator">|</span> <span class="token number">77</span>    <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">9</span> <span class="token operator">|</span> <span class="token number">88</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、简单条件查询数据</strong></p><p>在查询数据时，若想要查询出符合条件的相关数据记录时，可以使用WHERE实现。基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token operator">|</span>{字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>}
<span class="token keyword">from</span> 数据表名 <span class="token keyword">where</span> 字段名<span class="token operator">=</span>值<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> new_goods <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+-------+------+</span>
<span class="token operator">|</span> Sno_name <span class="token operator">|</span> price <span class="token operator">|</span> id   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-------+------+</span>
<span class="token operator">|</span> net      <span class="token operator">|</span> <span class="token number">77</span>    <span class="token operator">|</span>    <span class="token number">8</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-------+------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-3-修改数据" tabindex="-1"><a class="header-anchor" href="#_2-3-3-修改数据" aria-hidden="true">#</a> 2.3.3 修改数据</h3><p>修改数据是数据库中常见的操作，通常用于对表中的部分记录进行修改。例如，商品在做活动时，需要在原价的基础上打折，此时就需要对商品价格的数据进行修改。MySQL提供了UPDATE语句修改数据。基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> 数据表名
<span class="token keyword">set</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">where</span> 条件表达式<span class="token punctuation">]</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> new_goods <span class="token keyword">set</span> price<span class="token operator">=</span><span class="token string">&#39;114514&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-4-删除数据" tabindex="-1"><a class="header-anchor" href="#_2-3-4-删除数据" aria-hidden="true">#</a> 2.3.4 删除数据</h3><p>基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> 数据表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件表达式<span class="token punctuation">]</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> new_goods <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-动手实践-电子杂志订阅表的操作" tabindex="-1"><a class="header-anchor" href="#_2-4-动手实践-电子杂志订阅表的操作" aria-hidden="true">#</a> 2.4 动手实践：电子杂志订阅表的操作</h2><h2 id="_3-1-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-1-数据类型" aria-hidden="true">#</a> 3.1 数据类型</h2><h3 id="_3-1-1-数字类型" tabindex="-1"><a class="header-anchor" href="#_3-1-1-数字类型" aria-hidden="true">#</a> 3.1.1 数字类型</h3><p><strong>1、整数类型</strong></p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221027205453172.png" alt="image-20221027205453172"></p><p>从表3-1中可以看出，不同整数类型所占用的字节数和取值范围都是不同的。其中，占用字节数最小的是TINYINT,占用字节数最大的是BIGINT。不同整数类型的取值范围可以根据字节数计算出来，例如，TINYINT类型的整数占用1字节，1字节是8位，那么，TINYINT类型无符号数的最大值就是28一1（即255），有符号数的最大值就是2？一1（即127)。同理，可以算出其他不同整数类型的取值范围。</p><p>需要注意的是，若使用无符号数据类型，需要在数据类型右边加上UNSIGNED关键字来修饰，例如，INT UNSIGNED表示无符号INT类型。</p><h3 id="_3-1-2-时间和日期类型" tabindex="-1"><a class="header-anchor" href="#_3-1-2-时间和日期类型" aria-hidden="true">#</a> 3.1.2 时间和日期类型</h3><p>为了方便在数据库中存储日期和时间，MySQL提供了表示日期和时间的数据类型，分别是YEAR、DATE、TIME、DATETIME和TIMESTAMP。表3-4列举了这些MySQL中日期和时间数据类型所对应的字节数、取值范围、日期格式以及零值。</p><p><img src="https://gitee.com/dogge2333/blogpic/raw/master/images/image-20221028203526389.png" alt="image-20221028203526389"></p><p>如果插入的数值不合法，系统会自动将对应的零值插入数据库中</p><p><strong>1、YEAR 类型</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> my_year<span class="token punctuation">(</span>y <span class="token keyword">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#设置y字段的数据类型为YEAR</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> my_year <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#插入年份数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在MySQL中，可以使用以下3种格式指定YEAR类型的值：</p><ul><li>使用4位字符串或数字表示，为<code>&#39;1901&#39;~&#39;2155&#39;</code>或<code>1901~2155</code>。</li><li>使用两位字符串表示为<code>&#39;00&#39;~&#39;99&#39;</code>，其中，<code>&#39;00&#39;~&#39;69&#39;</code>的值会被转换为<code>2000~2069</code>的YEAR值，<code>&#39;70&#39;~&#39;99&#39;</code>的值会被转换为1970~1999的YEAR值。</li><li>使用两位数字表示为1~99，其中，<code>1~69</code>的值会被转换为2001~2069的YEAR值，<code>70~99</code>的值会被转换为1970~1999的YEAR值。</li></ul><p>需要注意的是，当使用YEAR类型时，一定要区分<code>&#39;0&#39;</code>和<code>0</code>。因为字符串格式的0表示的YEAR值是2000，而数字格式的0表示的YEAR值是0000。</p><p><strong>2、DATE 类型</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> my_date<span class="token punctuation">(</span>d <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#设置d字段的数据类型为DATE </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> my_date <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;2020-01-21&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#插入日期</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> my_date <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token keyword">current_date</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> my_date <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在MySQL中，可以使用以下4种格式指定DATE类型的值。</p><ul><li>以 <code>&#39;YYYY-MM-DD&#39;</code> 或者 <code>YYYYMMDD</code> 字符串格式表示。</li><li>以 <code>YY-MM-DD</code> 或者 <code>YYMMDD</code> 字符串格式表示。</li><li>以 <code>YY-MM-DD</code> 或者 <code>YYMMDD</code> 数字格式表示。</li><li>使用 CURRENT_DATE 或者 NOW() 输入当前系统日期。</li></ul><p>通过<code>SELECT CURRENT DATE;</code>或<code>SELECT NOW();</code>可查看当前日期。日期中的分隔符<code>-</code>还可以用<code>. , /</code>等符号替代。</p><p><strong>3、TIME 类型</strong></p><p>TME类型用于表示时间值，它的显示形式一般为 <code>HH:MM:SS</code>。在MySQL中，可以使用以下3种格式指定TME类型的值。</p><ul><li>以<code>HHMMSS</code>字符串或者<code>HHMMSS</code>数字格式表示</li><li>以<code>D HH:MM:SS</code>字符串格式表示。其中，D表示日，可以取0一34之间的值，插入数据时，小时的值等于<code>(D*24+HH)</code>。例如，输入<code>&#39;211：30：50&#39;</code>，插入数据库中的时间为<code>59:30:50</code>；输入<code>&#39;11:30:50&#39;</code>，插入数据库中的时间为<code>11:30:50</code>：输入<code>&#39;34 22:59:59&#39;</code>，插入数据库中的时间为<code>838:59:59</code>。</li><li>使用CURRENT TIME或NOW()输入当前系统时间。</li></ul><p><strong>4、DATETIME 类型</strong></p><p>DATETIME 类型用于表示日期和时间，它的显示形式为 <code>YYYY-MM-DD HH:MM:SS</code>。在MySQL 中，可以使用以下4种格式指定 DATETIME 类型的值。</p><ul><li>以<code>&#39;YYYY-MM-DD HH:MM:SS&#39;</code>或者<code>YYYYMMDDHHMMSS</code> 字符串格式表示的日期和时间，取值范围为<code>&#39;1000-01-01 00:00:00~9999-12-31 23:59:59&#39;</code>。</li><li>以<code>&#39;YY-MM-DD HH:MM:SS&#39;</code>或者<code>YYMMDDHHMMSS</code>字符串格式表示的日期和时间，其中YY表示年，取值范围为<code>&#39;00&#39;~99&#39;</code>。与DATE类型中的YY相同，<code>&#39;00&#39;~&#39;69&#39;</code>范围的值会被转换为2000~2069范围的值，<code>&#39;70&#39;~&#39;99&#39;</code>范围的值会被转换为1970~1999范围的值。</li><li>以 <code>YYYYMMDDHHMMSS</code>或者<code>YYMMDDHHMMSS</code>数字格式表示的日期和时间。</li><li>使用 NOW() 来输入当前系统的日期和时间。</li></ul><p><strong>5、TIMESTAMP 类型</strong></p><p>TIMESTAMP(时间戳)类型用于表示日期和时间，它的显示形式与DATETIME相同，但取值范围比DATETIME小。下面介绍几种TIMESTAMP类型与DATATIME类型不同的形式，具体如下。</p><ul><li>使用CURRENT_TIMESTAMP来输入系统当前日期和时间</li><li>无任何输入，或输入 NULL 时，实际保存的是系统当前日期和时间。</li></ul><blockquote><p>在MySQL中，TIMESTAMP字段默认情况下会自动设置NOT NULL DEFAULTCURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP属性，具体解释如下。</p><ul><li>NOT NULL表示非空约束，该字段将不允许保存NULL值</li><li>DEFAULT表示默认约束，当字段无任何输入时，自动设置某个值作为默认值。此处设为CURRENT_TIMESTAMP表示使用系统当前日期和时间作为默认值。</li><li>ON UPDATE用于当一条记录中的其他字段被UPDATE语句修改时，自动更改该字段为某个值。此处设为CURRENT_TIMESTAMP表示每次修改时保存修改时的系统日期和时间。</li></ul></blockquote><h3 id="_3-1-3-字符串类型" tabindex="-1"><a class="header-anchor" href="#_3-1-3-字符串类型" aria-hidden="true">#</a> 3.1.3 字符串类型</h3><table><thead><tr><th>数据类型</th><th>类型说明</th></tr></thead><tbody><tr><td>char</td><td>固定长度字符串</td></tr><tr><td>varchar</td><td>可变长度字符串</td></tr><tr><td>text</td><td>大文本数据</td></tr><tr><td>enum</td><td>枚举零类型</td></tr><tr><td>set</td><td>字符串对象</td></tr><tr><td>binary</td><td>固定长度的二进制数据</td></tr><tr><td>varbinary</td><td>可变长度的二进制数据</td></tr><tr><td>blob</td><td>二进制大对象</td></tr></tbody></table><p><strong>1、char 和 varchar 类型</strong></p><p>CHAR 和 VARCHAR 类型都用来保存字符串数据。不同的是，VARCHAR可以存储可变长度的字符串。</p><p>可以看出，对于CHAR(4)无论插入值的长度是多少，所占用的存储空间都是4字节。而VARCHAR(4)占用的字节数为实际长度加1。</p><table><thead><tr><th>插入值</th><th>char(4)存储需求</th><th>varchar(4)存储需求</th></tr></thead><tbody><tr><td><code>&quot;</code></td><td>4字节</td><td>1字节</td></tr><tr><td><code>&#39;ab&#39;</code></td><td>4字节</td><td>3字节</td></tr><tr><td><code>&#39;abc&#39;</code></td><td>4字节</td><td>4字节</td></tr><tr><td><code>&#39;abcd&#39;</code></td><td>4字节</td><td>5字节</td></tr></tbody></table><p><strong>2、text 类型</strong></p><p>TEXT类型用于保存大文本数据，例如，文章内容、评论等比较长的文本。</p><table><thead><tr><th>数据类型</th><th>存储范围</th></tr></thead><tbody><tr><td>tinytext</td><td>0~2^8-1字节</td></tr><tr><td>text</td><td>0~2^16-1字节</td></tr><tr><td>mediumtext</td><td>0~2^24-1字节</td></tr><tr><td>longtext</td><td>0~2^32-1字节</td></tr></tbody></table><blockquote><p>几点注意：</p><ul><li>CHAR 和 VARCHAR 插入数据时，若字符串末尾有空格，CHAR 会自动去掉空格后保存，VARCHAR、TEXT 会保留空格。</li><li>在使用<code>=</code>等运算符对 CHAR、VARCHAR、TEXT 比较时，字符串末尾的空格会被忽略。</li><li>默认情况下创建的数据库和表使用的校对集(latinl_swedish_ci)对大小写不敏感，因此 CHAR、VARCHAR、TEXT、ENUM、SET 类型都不区分大小写。而 BINARY、VARBINARY、BLOB 类型区分大小写，这是因为它们使用二进制方式保存数据。</li><li>MySQL 默认规定一条记录的最大长度是65535字节，一般来说，字段分配的存储空间和额外开销加在一起不能超过65535字节，如果超过了这个限制，在SQL严格模式下表会创建失败。但TEXT和BLOB类型字段的存储空间不受此限制，它们只占用额外开销（大约12字节）。</li><li>在没有超过65535限制的情况下，CHAR字段的最长值为255，VARCHAR字段的M的最大值取决于字符集，常用的字符集有latinl(默认)、gbk和utf8，对应的M最大值分别为65533、32766和21844，若表中只有一个字段且设置了非空约束，M可达到最大值，否则M的最大值会减小。</li><li>从执行效率上来说，TEXT和BLOB不如CHAR、VARCHAR类型，建议只有当需要保存大量数据时，才选择使用TEXT或BLOB类型。</li></ul></blockquote><p><strong>二进制方式比较字符串</strong></p><p>若要在CHAR、VARCHAR、TEXT类型的字符串比较时严格区分大小写，有多种实现方式，接下来讲解两种比较常见的方式。</p><ul><li>使用BINARY关键字。在字段名或某个值的前面加上 BINARY 关键字可以将类型转换为二进制，转换后进行比较就可以严格区分大小写和空格。具体示例如下。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#直接测试比较结果</span>
<span class="token keyword">select</span> <span class="token string">&#39;a&#39;</span><span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">#比较结果：1（相等）</span>
<span class="token keyword">select</span> <span class="token keyword">binary</span> <span class="token string">&#39;a&#39;</span><span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token operator">=</span><span class="token keyword">binary</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">#0</span>
<span class="token keyword">select</span> <span class="token keyword">binary</span> <span class="token string">&#39;A&#39;</span><span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">#1</span>
<span class="token keyword">select</span> <span class="token keyword">binary</span> <span class="token string">&#39;A&#39;</span><span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;A&#39;</span><span class="token operator">=</span><span class="token keyword">binary</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">#1</span>

<span class="token comment">#在查询条件中进行二进制比较</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> my_char<span class="token punctuation">(</span>c <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> my_char <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> c <span class="token keyword">from</span> my_char <span class="token keyword">where</span> c<span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">#查询结果为&quot;A&quot;</span>
<span class="token keyword">select</span> c <span class="token keyword">from</span> my_char <span class="token keyword">where</span> <span class="token keyword">binary</span> c<span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">#查询结果为空</span>
<span class="token keyword">select</span> c <span class="token keyword">from</span> my_char <span class="token keyword">where</span> <span class="token keyword">binary</span> c<span class="token operator">=</span><span class="token string">&#39;A &#39;</span><span class="token punctuation">;</span> <span class="token comment">#查询结果为空</span>
<span class="token keyword">select</span> c <span class="token keyword">from</span> my_char <span class="token keyword">where</span> <span class="token keyword">binary</span> c<span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">#查询结果为&#39;A&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置字段的校对集。latinl、gbk、utf8编码默认的校对集分别为latinl swedish_ci、gbk_chinese_ci、utf8_general_.ci,将其分别改为latinl_bin、gbk_bin、utf8_bin即可区分大小写，但在比较时仍会忽略字符串末尾的空格。具体示例如下。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建表时设置字段的校对集</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_char<span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> c1 <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">character</span> <span class="token keyword">set</span> latin1 <span class="token keyword">collate</span> latin1_bin<span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> c2 <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">character</span> <span class="token keyword">set</span> gbk <span class="token keyword">collate</span> gbk_bin<span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> c3 <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">character</span> <span class="token keyword">set</span> utf8 <span class="token keyword">collate</span> utf8_bin
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#插入测试数据</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_char <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询测试</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> c1<span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>c2<span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>c3<span class="token operator">=</span><span class="token string">&#39;a&#39;</span> <span class="token keyword">from</span> my_char<span class="token punctuation">;</span> <span class="token comment">#结果：0（不相等）</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> c1<span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>c2<span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>c3<span class="token operator">=</span><span class="token string">&#39;A&#39;</span> <span class="token keyword">from</span> my_char<span class="token punctuation">;</span> <span class="token comment">#1</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> c1<span class="token operator">=</span><span class="token string">&#39;A &#39;</span><span class="token punctuation">,</span>c2<span class="token operator">=</span><span class="token string">&#39;A &#39;</span><span class="token punctuation">,</span>c3<span class="token operator">=</span><span class="token string">&#39;A &#39;</span> <span class="token keyword">from</span> my_char<span class="token punctuation">;</span> <span class="token comment">#1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、enum 类型</strong></p><p>ENUM类型又称为枚举类型，ENUM类型的数据只能从枚举列表中取，并且只能取一个。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建表</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_enum<span class="token punctuation">(</span>gender <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#插入两条测试记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_enum <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询记录，查询结果为female</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_enum <span class="token keyword">where</span> gender<span class="token operator">=</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">;</span>
<span class="token comment">#插入枚举列表没有的值测试</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_enum <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR <span class="token number">1265</span> <span class="token punctuation">(</span><span class="token number">01000</span><span class="token punctuation">)</span>: <span class="token keyword">Data</span> truncated <span class="token keyword">for</span> <span class="token keyword">column</span> <span class="token string">&#39;gender&#39;</span> at <span class="token keyword">row</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在MySQL中，枚举列表最多可以有65535个值，每个值都有一个顺序编号，实际保存在记录中的是顺序编号，而不是列表中的值，因此不必担心过长的值占用空间。但在使用SELECT、INSERT等语句进行操作时，仍然使用列表中的值。</p><p>4、set 类型</p><p>SET类型用于保存字符串对象，其定义格式与ENUM类型类似，SET类型的列表中最多可以有64个值，且列表中的每个值都有一个顺序编号，为了节省空间，实际保存在记录中的也是顺序编号，但在使用SELECT、INSERT等语句进行操作时，仍然要使用列表中的值。SET类型与ENUM的区别在于，它可以从列表中选择一个或多个值来保存，多个值之间用逗号“，”分隔。具体使用示例如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建表</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_set <span class="token punctuation">(</span>hobby <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;game&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#插入3条测试记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_set <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;book&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;book,code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询记录，查询结构为book,code</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_set <span class="token keyword">where</span> hobby<span class="token operator">=</span><span class="token string">&#39;book,code&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：</p><ul><li>enum 类似单选框，set 类似多选框</li><li>enum 和 set 类型的优势在于规范数据本身，限定只能插入规定的数据项，节省了存储空间，查询速度比 char、varchar 快</li><li>ENUM和SET类型列表中的值都可以使用中文，但必须设置支持中文的字符集，例如<code>create table my_enm (gender enum(&#39;男&#39;,&#39;女&#39;)) charset=gbk;</code></li><li>EUM和SET类型在填写列表、插入值、查找值等操作时，都会自动忽略末尾的空格</li></ul></blockquote><p>5、binary 和 varbinary 类型</p><p>BINARY和VARBINARY类型类似于CHAR和VARCHAR,不同的是，它们所表示的是二进制数据。</p><p>在上述格式中，M是指二进制数据的最大字节长度。BINARY类型的长度是固定的，如果数据的长度不足最大长度，将在数据的后面用“0”补齐。例如，指定数据类型为BINARY(3)，当插人a时，实际存储的数据为<code>a\\0\\0</code>，当插入ab时，实际存储的数据为<code>ab\\0</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建表</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_binary <span class="token punctuation">(</span>b1 <span class="token keyword">binary</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b2 <span class="token keyword">varbinary</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#插入测试记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_binary <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xyz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询记录，查询结果分别为abc\\0和xyz</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> b1 <span class="token keyword">from</span> my_binary <span class="token keyword">where</span> b1<span class="token operator">=</span><span class="token string">&#39;abc\\0&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> b2 <span class="token keyword">from</span> my_binary <span class="token keyword">where</span> b2<span class="token operator">=</span><span class="token string">&#39;xyz&#39;</span><span class="token punctuation">;</span>
<span class="token comment">#查询记录，由于区分大小写，所以为空</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> b1 <span class="token keyword">from</span> my_binary <span class="token keyword">where</span> b1<span class="token operator">=</span><span class="token string">&#39;ABC\\0&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> b2 <span class="token keyword">from</span> my_binary <span class="token keyword">where</span> b2<span class="token operator">=</span><span class="token string">&#39;XYZ&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述示例可以看出，在查询BINARY类型时，查询条件字符串也需要加上“\\0”填充符，否则查询不到该记录，并且BINARY和VARBINARY都区分大小写</p><p>6、blob 类型</p><p>BLOB类型用于保存数据量很大的二进制数据，如图片、PDF文档等。BLOB类型分为4种</p><table><thead><tr><th>数据类型</th><th>存储范围</th></tr></thead><tbody><tr><td>tinyblob</td><td>0~2^8-1字节</td></tr><tr><td>blob</td><td>0~2^16-1字节</td></tr><tr><td>mediumblob</td><td>0~2^24-1字节</td></tr><tr><td>longblob</td><td>0~2^32-1字节</td></tr></tbody></table><p>需要注意的是，BLOB类型与TEXT类型很相似，但BLOB类型数据是根据二进制编码进行比较和排序，而TEXT类型数据是根据文本模式进行比较和排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建表，插入测试记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_blob <span class="token punctuation">(</span>b <span class="token keyword">blob</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_blob <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询记录，查询结果为data</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> b <span class="token keyword">from</span> my_blob <span class="token keyword">where</span> b<span class="token operator">=</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">;</span>
<span class="token comment">#查询记录，由于区分大小写，所以为空</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> b <span class="token keyword">from</span> my_blob <span class="token keyword">where</span> b<span class="token operator">=</span><span class="token string">&#39;Data&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JSON 数据类型</strong></p><p>MySQL从5.7.8版本开始提供了JSON数据类型。JSON是一种轻量级的数据交换格式，由JavaScript语言发展而来，其本质是一个字符串。MySQL,中JSON类型值常见的表现方式有两种，分别为JSON数组和JSON对象，示例如下。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>#json数组
<span class="token punctuation">{</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token null keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">}</span>
#json对象
<span class="token punctuation">{</span><span class="token property">&quot;k1&quot;</span><span class="token operator">:</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;k2&quot;</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述示例可知，JSON数组中保存的数据可以是任意类型。其中，JSON数组使用“[”和“门”符号实现，多个值之间使用逗号分隔，如10和ul:JSON对象使用“{”和“}”符号实现，保存的数据是一组键值对，如k1和k2是键名（或称为属性名），而vlue和10是键名对应的值。</p><p>与直接使用MySQL字符串类型相比，JSON数据类型具有自动验证格式、优化存储格式的优点。JSON数据类型所需的空间大致与LONGBLOB或LONGTEXT相同，且不能有默认值。下面演示JSON数据类型的使用示例，具体如下所示。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建表，插入测试记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_json <span class="token punctuation">(</span>j1 json<span class="token punctuation">,</span>j2 json<span class="token punctuation">)</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_json <span class="token keyword">values</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token string">&#39;{&quot;k1&quot;:&quot;value&quot;,&quot;k2&quot;:10}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;[&quot;run&quot;,&quot;sing&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_json<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------------------+-----------------+</span>
<span class="token operator">|</span> j1                        <span class="token operator">|</span> j2              <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------+-----------------+</span>
<span class="token operator">|</span> {<span class="token string">&quot;k1&quot;</span>: <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k2&quot;</span>: <span class="token number">10</span>} <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sing&quot;</span><span class="token punctuation">]</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------+-----------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述示例可以看出，JSON数据类型的字段以字符串的方式插入数据即可</p><h2 id="_3-2-表的约束" tabindex="-1"><a class="header-anchor" href="#_3-2-表的约束" aria-hidden="true">#</a> 3.2 表的约束</h2><p>为了防止数据表中插入错误的数据，MySQL定义了一些维护数据库完整性的规则，即表的约束。常见约束分为5种，分别是默认约束、非空约束、主键约束、唯一约束和外键约束。</p><h3 id="_3-2-1-默认约束" tabindex="-1"><a class="header-anchor" href="#_3-2-1-默认约束" aria-hidden="true">#</a> 3.2.1 默认约束</h3><p>默认约束用于为数据表中的字段指定默认值，即当在表中插入一条新记录时，如果没有给这个字段赋值，那么，数据库系统会自动为这个字段插人默认值。默认值是通过DEFAULT关键字定义的，其基本语法格式：<code>字段名 数据类型 default 默认值;</code></p><p>需要注意的是，BLOB、TEXT数据类型不支持默认约束。</p><p>创建my_default表，准备name和age两个字段，为age添加默认约束，默认值为18</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_default <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> age <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">default</span> <span class="token number">18</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看表结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> my_default<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> age   <span class="token operator">|</span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token number">18</span>      <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入记录进行测试</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#插入记录，省略name和age字段</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_default <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#省略age字段</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_default <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#在age字段中插入null值</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_default <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#在age字段使用默认值</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_default <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询结果</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_default<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+------+</span>
<span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+------+</span>
<span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span>
<span class="token operator">|</span> a    <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span>
<span class="token operator">|</span> b    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>
<span class="token operator">|</span> c    <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，由于name和age字段没有设置非空约束，在插人记录时省略了这两个字段的值，则分别使用默认值NULL和18。为age字段设置默认值18后，插入NULL值，则保存结果为NULL,不使用默认值。在为有默认值的字段指定数据时，可以通过DEFAULT关键字直接指定其使用默认值。</p><p>为现有的表添加或删除默认约束，其体SQL语句及执行结果如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#删除默认约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_default <span class="token keyword">modify</span> age <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">;</span>
<span class="token comment">#添加默认约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_default <span class="token keyword">modify</span> age <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">default</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-2-非空约束" tabindex="-1"><a class="header-anchor" href="#_3-2-2-非空约束" aria-hidden="true">#</a> 3.2.2 非空约束</h3><p>非空约束指的是字段的值不能为NULL,在MySQL中，非空约束是通过NOT NULL定义的，基本语法：<code>字段名 数据类型 not null</code></p><p>创建my_not_null表，准备n1,n2,n3字段进行测试，为n2和n3设置非空约束，为 n3设置默认值18</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_not_null <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> n1 <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> n2 <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> n3 <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">18</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看表结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> my_not_null<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span> <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------+------+-----+---------+-------+</span>
<span class="token operator">|</span> n1    <span class="token operator">|</span> <span class="token keyword">int</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> n2    <span class="token operator">|</span> <span class="token keyword">int</span>  <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> n3    <span class="token operator">|</span> <span class="token keyword">int</span>  <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token number">18</span>      <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------+------+-----+---------+-------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述结果中，Nu1列的值为O表示该字段添加了非空约束。需要注意的是，添加了非空约束的n2字段的Default为NULL,表示未给该字段设置默认值，而不能将其理解为默认值为NULL,否则在插人数据时，若n2字段为NULL,MySQL会报“Column&#39;n2cannot be null”错误提示。另外，在创建数据表时，非空约束与值为NULL的默认约束(DEFULT NULL)不能同时存在，否则数据表在创建时会失败，提示“Invalid default valueforh2”错误。</p><p>插入记录进行测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#省略n2字段，插入失败，提示n2没有默认值</span>
mysql<span class="token operator">&gt;</span> insert into my_not_null values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR <span class="token number">1364</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Field <span class="token string">&#39;n2&#39;</span> doesn<span class="token string">&#39;t have a default value
#将n2字段设为null，插入失败，提示n2字段不能为null
mysql&gt; insert into my_not_null values(null,null,null);
ERROR 1048 (23000): Column &#39;</span>n2<span class="token string">&#39; cannot be null
#将n3字段设为null，插入失败，提示n3字段不能为null
mysql&gt; insert into my_not_null values(null,20,null);
ERROR 1048 (23000): Column &#39;</span>n3&#39; cannot be null
<span class="token comment">#省略n1和n3字段，插入成功</span>
mysql<span class="token operator">&gt;</span> insert into my_not_null <span class="token punctuation">(</span>n2<span class="token punctuation">)</span> values <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询结果</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> * from my_not_null<span class="token punctuation">;</span>
+------+----+----+
<span class="token operator">|</span> n1   <span class="token operator">|</span> n2 <span class="token operator">|</span> n3 <span class="token operator">|</span>
+------+----+----+
<span class="token operator">|</span> NULL <span class="token operator">|</span> <span class="token number">20</span> <span class="token operator">|</span> <span class="token number">18</span> <span class="token operator">|</span>
+------+----+----+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，由于n2字段不能为NULL且没有默认值，在插入时不能插人NULL或省略该字段；3字段设置了默认值，在插人时可以省略该字段，但不能插人NULL。</p><blockquote><p>小提示：为现有的表添加或删除非空约束的方式与默认约束类似，使用ALTERTABLE修改列属性即可。但若目标列中已经保存了NULL值，添加非空约束会失败，提示“Invalid use of NULL value”,只要将NULL值改为其他值即可解决。</p></blockquote><h3 id="_3-2-3-唯一约束" tabindex="-1"><a class="header-anchor" href="#_3-2-3-唯一约束" aria-hidden="true">#</a> 3.2.3 唯一约束</h3><p>唯一约束用于保证数据表中字段的唯一性，即表中字段的值不能重复出现。唯一约束是通过UNIQUE定义的，其基本语法格式如下所示。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#列级约束</span>
字段名 数据类型 <span class="token keyword">unique</span><span class="token punctuation">;</span>
<span class="token comment">#表级约束</span>
<span class="token keyword">unique</span><span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建my_unique_1表和my_unique_2表，分别通过列级约束和表级约束的方式添加唯一约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#列级约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_unique_1 <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unique</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#表级约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_unique_2 <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看两个表的结构发现相同</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> my_unique_1<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">|</span> YES  <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> username <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述结果中，如果在id和username的Key列看到UNI,说明唯一约束已经添加成功，这两个字段是唯一键。值得一提的是，当表级约束仅建立在一个字段上时，其作用效果与列级约束相同。</p><p>为含唯一约束的字段插入记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#插入不重复记录，插入成功</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_unique_1 <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_unique_1 <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
<span class="token comment">#插入重复记录，失败</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_unique_1 <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR <span class="token number">1062</span> <span class="token punctuation">(</span><span class="token number">23000</span><span class="token punctuation">)</span>: <span class="token keyword">Duplicate</span> entry <span class="token string">&#39;1&#39;</span> <span class="token keyword">for</span> <span class="token keyword">key</span> <span class="token string">&#39;my_unique_1.id&#39;</span>
<span class="token comment">#查询插入的结果</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_unique_1<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+----------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> username <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+----------+</span>
<span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>     <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+----------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述结果可以看出，添加唯一约束后，插入重复记录会失败。其中，username字段出现了重复值NULL,这是因为MySQL的唯一约束允许存在多个NULL值。</p><p>添加和删除唯一性约束。若为一个现有的表添加或删除唯一约束，无法通过修改字段属性的方式操作，而是按照索引的方式来操作。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建测试表</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_unique_3 <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#添加唯一约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_unique_3 <span class="token keyword">add</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查看添加结果</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_unique_3\\G
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
       <span class="token keyword">Table</span>: my_unique_3
<span class="token keyword">Create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>my_unique_3<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci
<span class="token comment">#删除唯一约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_unique_3 <span class="token keyword">drop</span> <span class="token keyword">index</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询操作的执行结果中出现了“UNIQUE KEY id(id)”,它是添加唯一约束的完整语法，即UNIQUE(id)的完整形式：<code>unique key 索引名 (字段列表)</code></p><p>上述语法表示在添加唯一约束时创建索引，用于加快查询速度。其中，索引名可以自己指定，也可以省略，MySQL,会自动使用字段作为索引名。当需要对索引进行除时，需要指定这个索引名。</p><p>创建复合唯一约束。在表级唯一性约束创建时，UNIQUE()的字段列表中，可以添加多个字段，组成复合唯一键，其特点是只有多个字段的值相同时才视为重复记录。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#创建测试表，添加复合唯一键</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_unique_4 <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span>username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">)</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#插入不重复记录，插入成功</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_unique_4 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_unique_4 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
<span class="token comment">#插入重复记录，失败</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_unique_4 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR <span class="token number">1062</span> <span class="token punctuation">(</span><span class="token number">23000</span><span class="token punctuation">)</span>: <span class="token keyword">Duplicate</span> entry <span class="token string">&#39;1-2&#39;</span> <span class="token keyword">for</span> <span class="token keyword">key</span> <span class="token string">&#39;my_unique_4.id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-4-主键约束" tabindex="-1"><a class="header-anchor" href="#_3-2-4-主键约束" aria-hidden="true">#</a> 3.2.4 主键约束</h3><p>在MySQL中，为了快速查找表中的某条信息，可以通过设置主键来实现。主键可以唯一标识表中的记录，类似指纹、身份证用于标识人的身份一样。主键约束通过PRIMARY KEY定义，它相当于唯一约束和非空约束的组合，要求被约束字段不允许重复，也不允许出现ULL值，每个表最多只允许含有一个主键。主键约束的创建也分为列级和表级。其基本语法格式如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#列级约束</span>
字段名 数据类型 <span class="token keyword">primary</span> <span class="token keyword">key</span>
<span class="token comment">#表级约束</span>
<span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述语法中，表级约束的字段若只有一个，则为单字段主键与列级约束添加的效果相同：若有多个，则为复合主键。复合主键需要用多个字段来确定一条记录的唯一性，类似于复合唯一键。</p><p>创建my_primary表，为id字段添加主键约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_primary <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看表结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> my_primary<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> username <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述结果可以看出，id字段的Key列为PRI,表示该字段为主键。同时，id字段的Nul列为NO,表示该字段不能为NULL。</p><p>插入记录进行测试</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#插入测试，成功</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_primary <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#为主键插入null值，失败</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_primary <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR <span class="token number">1048</span> <span class="token punctuation">(</span><span class="token number">23000</span><span class="token punctuation">)</span>: <span class="token keyword">Column</span> <span class="token string">&#39;id&#39;</span> cannot be <span class="token boolean">null</span>
<span class="token comment">#为主键插入重复值，失败</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_primary <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR <span class="token number">1062</span> <span class="token punctuation">(</span><span class="token number">23000</span><span class="token punctuation">)</span>: <span class="token keyword">Duplicate</span> entry <span class="token string">&#39;1&#39;</span> <span class="token keyword">for</span> <span class="token keyword">key</span> <span class="token string">&#39;my_primary.PRIMARY&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为一个现有的表添加或删除主键约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#删除主键约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_primary <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span>
<span class="token comment">#查看删除结果</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> my_primary<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> username <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+-------+</span>
<span class="token comment">#删除id字段的非空约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_primary <span class="token keyword">modify</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">;</span>
<span class="token comment">#添加主键约束</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_primary <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述结果可以看出，在删除d字段的主键约束后，该字段的非空约束并没有被同时删除。</p><h2 id="_3-3-自动增长" tabindex="-1"><a class="header-anchor" href="#_3-3-自动增长" aria-hidden="true">#</a> 3.3 自动增长</h2><p>在为数据表设置主键约束后，每次插人记录时，都需要检查主键的值，防止插人的值重复导致插入失败，这会给数据库的使用带来很多麻烦。为此，可以利用MySQL提供的自动增长功能来自动生成主键的值。</p><p>自动增长功能通过AUTO INCREMENT来实现，其基本语法格式：<code>字段名 数据类型 auto_increment</code>，使用时需要注意：</p><ul><li>一个表中只能有一个自动增长字段，该字段的数据类型是整数类型，且必须定义为键，如UNIQUE KEY、PRIMARY KEY。</li><li>若为自动增长字段插入NUII、0、DEFAU1T或在插入时省略该字段，则该字段就会使用自动增长值；若插入的是一个具体值，则不会使用自动增长值。</li><li>自动增长值从1开始自增，每次加1。若插入的值大于自动增长的值，则下次插入的自动增长值会自动使用最大值加1；若插入的值小于自动增长值，则不会对自动增长值产生影响。</li><li>使用DELETE删除记录时，自动增长值不会减小或填补空缺。</li></ul><p>创建my_auto表，为id字段添加自动增长</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_auto <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看表结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> my_auto<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+----------------+</span>
<span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+----------------+</span>
<span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span>
<span class="token operator">|</span> username <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------+------+-----+---------+----------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入记录进行测试</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#插入时省略id字段，将会使用自动增长值</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_auto <span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#为id字段插入null，将会使用自动增长值</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_auto <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#为id字段插入具体值6</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_auto <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#为id字段插入0，使用自动增长值</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> my_auto <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看my_auto数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_auto<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+----------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> username <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+----------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> a        <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> b        <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> c        <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> d        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+----------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述结果中，最后一条记录的id字段在插入时使用了0，MySQL会忽略该值，使用自动增长值（即id最大值6进行加1），从而得到id的值为7。</p><p>使用show create table查看自动增长值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> my_auto\\G
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
       <span class="token keyword">Table</span>: my_auto
<span class="token keyword">Create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>my_auto<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>username<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">9</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述结果中，“AUTO INCREMENT=9”用于指定下次插入的自动增长值为9。若在下次插入时指定了大于9的值，此处的9会自动更新为下次插入值加1。</p><p>为现有的表修改或删除自动增长</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#修改自动增长值</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_auto <span class="token keyword">auto_increment</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">#删除自动增长</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_auto <span class="token keyword">modify</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">;</span>
<span class="token comment">#重新为id添加自动增长</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> my_auto <span class="token keyword">modify</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，在为字段删除自动增长并重新添加自动增长后，自动增长的初始值会自动设为该列现有的最大值加1。在修改自动增长值时，修改的值若小于该列现有的最大值，则修改不会生效。</p><h2 id="_3-4-字符集与校对集" tabindex="-1"><a class="header-anchor" href="#_3-4-字符集与校对集" aria-hidden="true">#</a> 3.4 字符集与校对集</h2><p>MySQL默认使用的字符集为latinl(ISO-8859-1的别名)，这是一种单字节编码的字符集。由于中文汉字属于多字节编码的字符，若要保存中文，需要设置成其他支持中文的字符集，如GBK、UTF8。校对集是字符之间的比较关系，在比较、排序等操作时都会用到校对集。</p><h3 id="_3-4-1-字符集与校对集概述" tabindex="-1"><a class="header-anchor" href="#_3-4-1-字符集与校对集概述" aria-hidden="true">#</a> 3.4.1 字符集与校对集概述</h3><p><strong>1、字符集</strong></p><p>字符(character)指计算机中保存的各种文字和符号，包括各种国家的文字、标点符号、图形符号、数字等。由于计算机采用二进制保存数据，用户输人的字符将会按照一定的规则转换为二进制后保存，这个过程就是字符编码(character encoding),将一系列字符的编码规则组合起来就形成了字符集(character set,charset)。通过“SHOW CHARACTER SET;”可以查看可用字符集</p><p>图3-l显示了字符集名称(Charset)、描述信息(Description)、默认校对集(Defaultcollation)和单字符的最大长度(Maxlen)。常用字符集有latinl、gbk、utf8</p><table><thead><tr><th>字符集</th><th>单字符最大长度</th><th>支持的语言</th></tr></thead><tbody><tr><td>latin1</td><td>1字节</td><td>西欧字符、希腊字符</td></tr><tr><td>gbk</td><td>2字节</td><td>简体和繁体中文、日文、韩文等</td></tr><tr><td>utf8</td><td>3字节</td><td>世界上大部分国家的文字</td></tr></tbody></table><p>从表3-9中可以看出，单宇符占用的存储空间越多，所支持的语言越多。另外，表中列举的字符集都向下兼容ASCII(美国信息交换标准代码)，若输入的字符在ASCII范围内(0x00~0x7F),则编码结果是完全相同的。</p><blockquote><p>由于历史原因，MySQL中的utf8编码与标准的UTF-8(RFC3629)存在一些差别。标准的UTF-8规定一个字符最多使用4字节，而MySQL中的utf8编码一个字符最多使用3字节，这导致UTF-8中的一些特殊字符（如emoji符号）无法在MySQL的utf8编码中使用。为了解决这个问题，MySQL从5.5.3版本开始新增了utf8mb4编码，将一个字将扩展到4字节。因此，如果要考虑支持RFC3629规范，应使用utf8mb4编码。</p></blockquote><p><strong>2、校对集</strong></p><p>MySQL中提供了许多校对集，用于为不同字符集指定比较和排序规则。例如，latinl字符集默认的校对集为latinl_swedish_ci。校对集的名称由“”分隔的3部分组成，开头是对应的字符集，中间是国家名或general,.结尾是ci、cs或bin。其中，ci表示不区分大小写，cs表示区分大小写，bin表示以二进制方式比较。通过“SHOW COLLATION:”可以查看MySQL可用的校对集</p><p>图3-2显示了校对集名称(Collation)、对应的字符集(Charset)、校对集D(Id)、是否为对应字符集的默认校对集(Default)、是否已编译(Compiled)以及排序的内存需求量(Sortlen).</p><h3 id="_3-4-2-字符集与校对集的设置" tabindex="-1"><a class="header-anchor" href="#_3-4-2-字符集与校对集的设置" aria-hidden="true">#</a> 3.4.2 字符集与校对集的设置</h3><p>根据不同的需求，字符集与校对集的设置分为4个方面，分别是MySQL环境、数据库、数据表以及字段。</p><p><strong>1、Mysql 环境</strong></p><p>使用MySQL命令“SHOW VARIABLES LIKE&#39;character.%&#39;;”可以查看与字符集相关的变量，输出结果如下所示。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;character%&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------------+--------------------------------+</span>
<span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span>                          <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------------+--------------------------------+</span>
<span class="token operator">|</span> character_set_client     <span class="token operator">|</span> latin1  <span class="token comment">#客户端字符集            |</span>
<span class="token operator">|</span> character_set_connection <span class="token operator">|</span> latin1<span class="token comment">#客户端与服务器连接用的字符集 |</span>
<span class="token operator">|</span> character_set_database   <span class="token operator">|</span> utf8mb4 <span class="token comment">#默认数据库的字符集       |</span>
<span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> <span class="token keyword">binary</span>   <span class="token comment">#文件系统字符集         |</span>
<span class="token operator">|</span> character_set_results    <span class="token operator">|</span> latin1 <span class="token comment">#查询结果返回给客户端的字符集|</span>
<span class="token operator">|</span> character_set_server     <span class="token operator">|</span> utf8mb4 <span class="token comment">#服务器默认字符集         |</span>
<span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8mb3<span class="token comment">#服务器用来存储标识符的字符集|</span>
<span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> <span class="token operator">/</span>charsets<span class="token operator">/</span>       <span class="token comment">#安装字符集的目录|</span>
<span class="token operator">+</span><span class="token comment">--------------------------+--------------------------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述结果表示当前会话(Session)使用的字符集，在不同客户端环境中的输出结果可能不同。这里所说的会话，是指从客户端登录服务器到退出的整个过程。例如，依次打开两个客户端并登录服务器，就产生了两个会话，不同客户端属于不同的会话。由此可见，不同的客户端可以指定不同的字符集环境配置，服务器会按照不同的配置进行处理。</p><p><strong>2、数据库</strong></p><p><strong>3、数据表</strong></p><p><strong>4、字段</strong></p><h2 id="_3-5-动手实践-设计用户表" tabindex="-1"><a class="header-anchor" href="#_3-5-动手实践-设计用户表" aria-hidden="true">#</a> 3.5 动手实践：设计用户表</h2><p><strong>1、创建用户表</strong></p><p><strong>2、添加测试记录</strong></p><p><strong>3、查询用户表中的记录</strong></p><h2 id="_4-1-数据库设计概述" tabindex="-1"><a class="header-anchor" href="#_4-1-数据库设计概述" aria-hidden="true">#</a> 4.1 数据库设计概述</h2><p><strong>1、需求分析</strong></p><p><strong>2、概念数据库设计</strong></p><p><strong>3、逻辑数据库设计</strong></p><p><strong>4、物理数据库设计</strong></p><p><strong>5、数据库实施</strong></p><p><strong>6、数据库运行和维护</strong></p><h2 id="_4-2-数据库设计范式" tabindex="-1"><a class="header-anchor" href="#_4-2-数据库设计范式" aria-hidden="true">#</a> 4.2 数据库设计范式</h2><p>为了避免不规范的数据库出现数据冗余，造成插入、删除、更新操作异常等情况，就要满足一定的规范化要求，这就是范式，范式有多种级别。</p><p><strong>1、第一范式 1NF</strong></p><p>指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值，或不能有重复的属性。简而言之，第一范式遵从原子性，属性不可再分。</p><p>,下面通过表1和表2演示不满足第一范式的情况，编号表示主键</p><table><thead><tr><th>编号（表1）</th><th>联系方式</th></tr></thead><tbody><tr><td>1</td><td>张三 邮箱：zhangsan@example.com，手机号：18900000000</td></tr><tr><td>2</td><td>李四 邮箱：lisi@example.com，手机号：15900000000、17300000000</td></tr></tbody></table><table><thead><tr><th>编号（表2）</th><th>用户名</th><th>邮箱</th><th>手机号</th><th>手机号</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>zhangsan@example.com</td><td>18900000000</td><td></td></tr><tr><td>2</td><td>李四</td><td>lisi@example.com</td><td>15900000000</td><td>17300000000</td></tr></tbody></table><p>表4-1的问题在于“联系方式”包含了多个值，可以再细分；表4-2的问题在于“手机号”属性重复。</p><p>为了满足第一范式，应将用户和联系方式分成两个表保存，两个表是一对多的联系。具体如表4-3和表4-4所示。</p><table><thead><tr><th>用户编号（表3）</th><th>用户名</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr></tbody></table><table><thead><tr><th>编号（表4）</th><th>用户编号</th><th>联系方式</th><th>具体值</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>邮箱</td><td>zhangsan@example.com</td></tr><tr><td>2</td><td>1</td><td>手机号</td><td>18900000000</td></tr><tr><td>3</td><td>2</td><td>邮箱</td><td>lisi@example.com</td></tr><tr><td>4</td><td>2</td><td>手机号</td><td>15900000000</td></tr><tr><td>5</td><td>2</td><td>手机号</td><td>17300000000</td></tr></tbody></table><p><strong>2、第二范式 2NF</strong></p><p>第二范式(2NF)是在第一范式的基础上建立起来的，满足第二范式必须先满足第一范式。第二范式要求实体的属性完全依赖于主键，不能仅依赖主键的一部分（对于复合主键而言)。简而言之，第二范式遵从唯一性，非主键字段需完全依赖主键。</p><p>下面通过表4-5和表4-6演示不满足第二范式的情况</p><table><thead><tr><th>订单编号（表5）</th><th>订单商品</th><th>购买件数</th><th>下单时间</th></tr></thead><tbody><tr><td>1</td><td>铅笔</td><td>3</td><td>2019-01-20 8:30:15</td></tr><tr><td>2</td><td>钢笔</td><td>2</td><td>2019-01-20 8:30:15</td></tr><tr><td>3</td><td>圆珠笔</td><td>1</td><td>2019-02-12 9:20:16</td></tr></tbody></table><table><thead><tr><th>用户编号（表6）</th><th>订单编号</th><th>用户名</th><th>付款状态</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>张三</td><td>已支付</td></tr><tr><td>1</td><td>2</td><td>张三</td><td>未支付</td></tr><tr><td>2</td><td>3</td><td>李四</td><td>已支付</td></tr></tbody></table><p>在表4-6中，用户编号和订单编号组成了复合主键，付款状态完全依赖复合主键，而用户名只依赖用户编号。</p><p>采用上述方式设计的用户表存在如下问题：</p><ul><li>插人异常：如果一个用户没有下过订单，则该用户无法插入</li><li>删除异常：如果删除一个用户所有的订单，则该用户也会被删除</li><li>更新异常：由于用户名冗余，修改一个用户时需要修改多条记录。如果稍有不慎，漏改某些记录，会出现更新异常。</li></ul><p>为了满足第二范式，将复合主键移动到订单表中</p><table><thead><tr><th>用户编号（表7）</th><th>用户名</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr></tbody></table><table><thead><tr><th>订单编号（表8）</th><th>用户编号</th><th>订单商品</th><th>购买件数</th><th>下单时间</th><th>付款状态</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>铅笔</td><td>3</td><td>2019-01-20 8:30:15</td><td>已支付</td></tr><tr><td>2</td><td>1</td><td>钢笔</td><td>2</td><td>2019-01-20 8:30:15</td><td>未支付</td></tr><tr><td>3</td><td>2</td><td>圆珠笔</td><td>1</td><td>2019-02-12 9:20:16</td><td>已支付</td></tr></tbody></table><p><strong>3、第二范式 3NF</strong></p><p>第三范式(3F)是在第二范式的基础上建立起来的，即满足第三范式必须先满足第二范式。第三范式要求一个数据表中每一列数据都和主键直接相关，而不能间接相关。简而言之，第三范式就是非主键字段不能相互依赖。</p><p>下面通过表9演示不满足第三范式的情况。</p><table><thead><tr><th>用户编号（表9）</th><th>用户名</th><th>用户等级</th><th>享受折扣</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td><td>0.95</td></tr><tr><td>2</td><td>李四</td><td>1</td><td>0.95</td></tr><tr><td>3</td><td>王五</td><td>2</td><td>0.85</td></tr></tbody></table><p>在表4-9中，用户享受的折扣与用户等级相关，两者存在依赖关系。采用这种方式设计的用户表存在如下问题。</p><ul><li>插人异常：新插入用户的等级如果在1、2之外，其享受的折扣无处参考</li><li>删除异常：如果明除某个等级下所有的用户，该等级对应的折扣也被明除</li><li>更新异常：如果修改某个用户的等级，折扣也必须随之修改：如果修改某个等级的折扣，又因为折扣存在冗余，容易发生漏改。</li></ul><p>为了满足第三范式，将等级与折扣拆分到单独的表中</p><table><thead><tr><th>用户编号</th><th>用户名</th><th>用户等级</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td></tr><tr><td>2</td><td>李四</td><td>1</td></tr><tr><td>3</td><td>王五</td><td>2</td></tr></tbody></table><table><thead><tr><th>用户等级</th><th>享受折扣</th></tr></thead><tbody><tr><td>1</td><td>0.95</td></tr><tr><td>2</td><td>0.85</td></tr></tbody></table><blockquote><p>多学一招：函数依赖</p><p>函数依赖(Functional Dependency)是由数学派生的术语，是数据依赖的一种类型。它表示根据一个属性（或属性集）的值，可以找到另一个属性（或属性集）的值。例如，将商品关系模式中的属性“商品d”设为X,属性集（商品名称，商品价格）设为Y,根据X可以找到Y,说明X决定了Y,Y函数依赖于X,记为X→Y。</p><p>函数依赖根据依赖属性的不同可以分为完全函数依赖、部分函数依赖和传递函数依赖，具体如下：</p><ul><li>完全函数依赖。以表4-8为例，使用订单编号和用户编号可以决定付款状态，而若只有订单编号，无法决定是哪一个用户创建了订单，只有用户编号，无法决定是哪一个订单。因此，付款状态这个属性函数依赖（订单编号，用户编号）属性集。</li><li>部分函数依赖。以表4-6为例，用户名依赖用户编号，但不依赖订单编号，因此用户名这个属性部分函数依赖（订单编号，用户编号）属性集。</li><li>传递函数依赖。以表4-9为例，享受折扣依赖用户等级，用户等级依赖用户编号，所以享受折扣传递函数依赖用户编号。</li></ul><p>由此可见，在第一范式限定了一个关系模式的所有属性都是不可分的基本数据项以后，第二范式消除了部分函数依赖，第三范式消除了传递函数依赖。</p></blockquote><p><strong>反范式</strong></p><p>反范式是一种逆规范化设计，其目的主要是为了提高查询效率。范式减少了数据冗余，但是增加了表的数量，这会使查询变得复杂，尤其是连接多张表查询数据时。例如，商品销量可以查询订单表中的购买记录，当需要查询大量商品的销量时，就需要花费许多时间去计算销量。</p><p>为了提高查询效率，可以违反范式增加一个销量字段，当商品被购买时就增加销量字段。缺点是容易出现数据不一致的问题。例如，用户购买商品后，程序出现意外没有增加销量。</p><p>在实际开发中，若选择采取反范式的设计，应该提前评估其可能出现的问题，并准备一套解决方案。例如，通过存储过程进行操作，定期检查数据的一致性等。</p><h2 id="_4-3-数据建模工具" tabindex="-1"><a class="header-anchor" href="#_4-3-数据建模工具" aria-hidden="true">#</a> 4.3 数据建模工具</h2><h2 id="_4-4-数据库设计——电子商务网站" tabindex="-1"><a class="header-anchor" href="#_4-4-数据库设计——电子商务网站" aria-hidden="true">#</a> 4.4 数据库设计——电子商务网站</h2><h3 id="_4-4-1-需求分析" tabindex="-1"><a class="header-anchor" href="#_4-4-1-需求分析" aria-hidden="true">#</a> 4.4.1 需求分析</h3><p>电商网站最基本的功能是在线购物，它分为前台和后台，后台面向网站的运营人员，用于录入数据，前台面向访问网站的用户，用于选购商品。</p><table><thead><tr><th>需求（商品表）</th><th>说明</th></tr></thead><tbody><tr><td>商品</td><td>基本信息</td></tr><tr><td>商品分类</td><td>如手机、书籍、服装等，支持多级分类</td></tr><tr><td>商品属性</td><td>商品分类的属性信息，如手机品牌、屏幕尺寸等</td></tr><tr><td>商品规格</td><td>如颜色、尺寸，不同规格的价格、库存数不同</td></tr><tr><td>商品评论</td><td>用户发表的商品评论</td></tr><tr><td>商品评分</td><td>用户对商品的评分，范围1~5分</td></tr><tr><td>商品图片</td><td>后台上传的图片路径</td></tr><tr><td>商品咨询</td><td>用户发表的商品咨询信息</td></tr></tbody></table><table><thead><tr><th>需求（用户表）</th><th>说明</th></tr></thead><tbody><tr><td>用户</td><td>注册用户，可以购买商品、编辑个人资料等</td></tr><tr><td>收货地址</td><td>用户的收货地址表</td></tr><tr><td>购物车</td><td>用户保存在购物车中的商品</td></tr><tr><td>用户等级</td><td>用户等级划分</td></tr><tr><td>用户订阅</td><td>用户订阅的邮箱电子杂志</td></tr><tr><td>用户收藏</td><td>用户收藏的商品</td></tr><tr><td>用户日志</td><td>登录记录、充值记录、消费记录、提现记录等日志信息</td></tr></tbody></table><table><thead><tr><th>需求（订单表）</th><th>说明</th></tr></thead><tbody><tr><td>订单</td><td>用户购买商品下的订单</td></tr><tr><td>订单日志</td><td>等待确认、已确认、请求取消、已取消、已发货等日志</td></tr><tr><td>发货</td><td>发货单，如收货地址、收货人、物流单号等</td></tr><tr><td>售后服务</td><td>申请退换货、退款等</td></tr></tbody></table><table><thead><tr><th>需求（文章表）</th><th>说明</th></tr></thead><tbody><tr><td>文章</td><td>文章标题、所属分类、文章内容等</td></tr><tr><td>文章分类</td><td>如新闻动态、网站公告、帮助信息等，支持多级分类</td></tr></tbody></table><table><thead><tr><th>需求（公共表）</th><th>说明</th></tr></thead><tbody><tr><td>系统设置</td><td>网站设置，如网站标题、LOGO、备案号、客服QQ等</td></tr><tr><td>配送地区</td><td>前台用户收货地址的地区选择范围，如省、市、区、县等</td></tr><tr><td>链接</td><td>页面顶部、底部、主导航、搜索区域的链接</td></tr><tr><td>广告</td><td>各种类型的广告信息</td></tr><tr><td>推荐商品</td><td>在首页、列表页等页面显示的推荐商品</td></tr><tr><td>运行日志</td><td>用户注册、登录失败、提交订单、取消订单等产生的日志</td></tr></tbody></table><table><thead><tr><th>需求（后台表）</th><th>说明</th></tr></thead><tbody><tr><td>后台用户</td><td>保存后台用户的数据</td></tr><tr><td>后台用户组</td><td>后台用户组，如管理员、编辑、仓管员、客服等</td></tr><tr><td>后台权限</td><td>除管理员外，为其他用户组开放的权限</td></tr><tr><td>后台日志</td><td>后台的操作日志，如商品发布日志、商品修改日志等</td></tr></tbody></table><p>在设计数据库时，考虑到需求将来可能会发生变化的情况，应设计一个尽量能够适应需求变化的数据库，其关键点如下：</p><ul><li>避免数据经常发生变化。设计数据库时，应尽量保存不变的数据，以减少修改数据带来的开销。例如，在设计用户表时一般会保存出生日期而不是年龄。</li></ul><blockquote><p>在实际开发中，会遇到数据被大量访问，但要经过复杂的运算的情况。例如，在首页显示销量排名前10的商品，需要统计出所有商品的销量并降序排列，当有大量用户同时访问，会给数据库带来极大的负担。为此，可以利用Memcached、Redis等技术对热门数据进行缓存，以减少数据库的查询次数。</p></blockquote><ul><li>避免经常修改表结构。表结构的修改包括字段的增减、数据类型和约束的修改等。已上线的项目修改表结构可能会导致服务暂停。例如，在首页中增加一个推荐商品时，不必在商品表中增加一个推荐字段，而是专门创建一个推荐商品表。其目的是将功能数据与商品数据分离，商品数据一般不发生变化，而功能数据会随着功能的增加或减少而经常变化。</li><li>尽可能详细地记录日志。利用日志记录数据的变化，可以为将来的功能增加提供数据基础。例如，当网站用户的账号被盗时，为了验明真实情况，需要确定账号被盗取的时间、登录的P地址，以及充值、消费、订单等数据是否发生过变化。若没有记录日志，则难以追溯。</li><li>避免删除数据。例如，用户因误操作删除了订单，希望恢复订单，需要在项目中增加订单回收站功能。若数据库中的订单记录已被删除，即使增加了回收站功能，订单也无法恢复。因此，在设计数据库时，应考虑数据既可以被删除，又可以被恢复。例如，在订单表中增加一个“是否删除”的字段，用来标识记录是否被删除。当查询订单时，通过WHERE获取未被删除的订单，当查询订单回收站时，通过WHERE获取已删除的订单。</li></ul><h3 id="_4-4-2-准备工作" tabindex="-1"><a class="header-anchor" href="#_4-4-2-准备工作" aria-hidden="true">#</a> 4.4.2 准备工作</h3><p>在MySQL中创建一个shop数据库，用来保存电子商务网站中的数据。在创建数据库后，使用USE shop选择数据库，具体SQI语句如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">database</span> shop<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> shop<span class="token punctuation">;</span>
<span class="token keyword">Database</span> changed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-3-商品分类表" tabindex="-1"><a class="header-anchor" href="#_4-4-3-商品分类表" aria-hidden="true">#</a> 4.4.3 商品分类表</h3><table><thead><tr><th>字段名</th><th>商品类型和约束</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>int unsigned primary key auto_increment</td><td>分类 id</td></tr><tr><td>parent_id</td><td>int unsigned not null default 0</td><td>上级分类 id</td></tr><tr><td>name</td><td>varchar(100) not null default &#39;&#39;</td><td>名称</td></tr><tr><td>sort</td><td>int not null default 0</td><td>排序</td></tr><tr><td>is_show</td><td>tinyint unsigned not null default 0</td><td>是否显示</td></tr><tr><td>create_time</td><td>datetime not null default current_timestamp</td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime default null</td><td>更新时间</td></tr></tbody></table><ul><li>对于 is show 字段，其数据类型选择 TINYINT 而不是 ENUM，这是考虑到需求将来有可能会发生变化，ENMU 类型在增加枚举值时需要修改表结构，而 TINYINT 类型不需要修改表结构。</li><li>如果父分类的 is_show 值为0，则该分类和它的子分类都不会显示。子分类必须满足自身 is_show 和父分类 is_show 都为1时才会显示。</li><li>update_time 字段的默认为 NULL，这是因为在新插入某一条记录时，该记录并没有发生过修改操作，所以用 NULL 来表示。</li></ul><p>下面根据表结构创建商品分类表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> sh_goods_category<span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;分类id&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> parent_id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;上级分类id&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> sort <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;排序&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> is_show <span class="token keyword">tinyint</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否显示&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> create_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> update_time <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;更新时间&#39;</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>商品分类表创建完成后，添加测试数据如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> sh_goods_category <span class="token punctuation">(</span>id<span class="token punctuation">,</span>parent_id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;办公&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;耗材&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;文具&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;电子产品&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;通讯&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;手机&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;电脑&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;台式电脑&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;笔记本&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;服装&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">&#39;女装&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&#39;风衣&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&#39;毛衣&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-4-4-商品表" tabindex="-1"><a class="header-anchor" href="#_4-4-4-商品表" aria-hidden="true">#</a> 4.4.4 商品表</h3><table><thead><tr><th>字段名</th><th>数据类型和约束</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>int unsigned primary key auto_increment</td><td>商品id</td></tr><tr><td>category_id</td><td>int unsigned not null default 0</td><td>分类id</td></tr><tr><td>spu_id</td><td>int unsigned not null default 0</td><td>SPU id</td></tr><tr><td>sn</td><td>varchar(20) not null default &#39;&#39;</td><td>编号</td></tr><tr><td>name</td><td>varchar(120) not null default &#39;&#39;</td><td>名称</td></tr><tr><td>keyword</td><td>varchar(255) not null default &#39;&#39;</td><td>关键词</td></tr><tr><td>picture</td><td>varchar(255) not null default &#39;&#39;</td><td>图片</td></tr><tr><td>tips</td><td>varchar(255) not null default &#39;&#39;</td><td>提示</td></tr><tr><td>description</td><td>varchar(255) not null default &#39;&#39;</td><td>描述</td></tr><tr><td>content</td><td>text not null</td><td>详情</td></tr><tr><td>price</td><td>decimal(10,2) unsigned not null default 0</td><td>价格</td></tr><tr><td>stock</td><td>int unsigned not null default 0</td><td>库存</td></tr><tr><td>score</td><td>decimal(3,2) unsigned not null default 0</td><td>评分</td></tr><tr><td>is_on_sale</td><td>tinyint unsigned not null default 0</td><td>是否上架</td></tr><tr><td>is_del</td><td>tinyint unsigned not null default 0</td><td>是否删除</td></tr><tr><td>is_free_shipping</td><td>tinyint unsigned not null default 0</td><td>是否包邮</td></tr><tr><td>sell_count</td><td>int unsigned not null default 0</td><td>销量计数</td></tr><tr><td>comment_count</td><td>int unsigned not null default 0</td><td>评论计数</td></tr><tr><td>on_sale_time</td><td>datetime default null</td><td>上架时间</td></tr><tr><td>create_time</td><td>datetime not null default current_timestamp</td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime default null</td><td>更新时间</td></tr></tbody></table><ul><li>对于商品编号，若没有特殊要求，一般情况下使用商品 id 作为编号。但考虑到将来有可能更换另外一套规则来管理编号，因此这里预留了一个编号字段。</li><li>由于商品分类是多级嵌套结构，一般来说，商品所属的分类应该是叶子节点的分类。如果现有分类不能满足需求，可以增加一个名称为“其他”的分类。</li><li>用户上传的图片等文件，一般是由 Web 服务器来管理的，数据库中只保存它们的引用路径。</li></ul><p>对应的语句如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> sh_goods <span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;商品id&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> category_id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;分类id&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> spu_id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;SPU id&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> sn <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;编号&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> keyword <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;关键词&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> picture <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;图片&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> tips <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;提示&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;描述&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> content <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;详情&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;价格&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> stock <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;库存&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> score <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;评分&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> is_on_sale <span class="token keyword">tinyint</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否上架&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> is_del <span class="token keyword">tinyint</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否删除&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> is_free_shipping <span class="token keyword">tinyint</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否包邮&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> sell_count <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;销量计数&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> comment_count <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;评论计数&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> on_sale_time <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;上架时间&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> create_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> update_time <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;更新时间&#39;</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建表后插入测试数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> sh_goods <span class="token punctuation">(</span>id<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>keyword<span class="token punctuation">,</span>content<span class="token punctuation">,</span>price<span class="token punctuation">,</span>stock<span class="token punctuation">,</span>score<span class="token punctuation">,</span>comment_count<span class="token punctuation">)</span> <span class="token keyword">values</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;2B铅笔&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;文具&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;考试专用&#39;</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">4.9</span><span class="token punctuation">,</span><span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;钢笔&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;文具&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;练字必不可少&#39;</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">3.9</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;碳素笔&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;文具&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;平时使用&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">98000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&#39;超薄笔记本&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;电子产品&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;轻小便携&#39;</span><span class="token punctuation">,</span><span class="token number">5999</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;智能手机&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;电子产品&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;人人必备&#39;</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">98000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;桌面音响&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;电子产品&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;扩音设备&#39;</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">4.5</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;头戴耳机&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;电子产品&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;独享个人世界&#39;</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3.9</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;办公电脑&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;电子产品&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;适合办公&#39;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4.8</span><span class="token punctuation">,</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">&#39;收腰风衣&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;服装&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;春节潮流单品&#39;</span><span class="token punctuation">,</span><span class="token number">299</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4.9</span><span class="token punctuation">,</span><span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">&#39;薄毛衣&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;服装&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;居家旅行必备&#39;</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4.8</span><span class="token punctuation">,</span><span class="token number">98000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-5-商品规格表" tabindex="-1"><a class="header-anchor" href="#_4-4-5-商品规格表" aria-hidden="true">#</a> 4.4.5 商品规格表</h3><h2 id="_5-1-数据操作" tabindex="-1"><a class="header-anchor" href="#_5-1-数据操作" aria-hidden="true">#</a> 5.1 数据操作</h2><h3 id="_5-1-1-复制表结构和数据" tabindex="-1"><a class="header-anchor" href="#_5-1-1-复制表结构和数据" aria-hidden="true">#</a> 5.1.1 复制表结构和数据</h3><p><strong>1、赋值已有的表结构</strong></p><p>开发时若需要创建一个与已有数据表相同结构的数据表时，可以通过下面的语法复制。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//create [temporary] table [if not exists] 表名</span>
<span class="token comment">//{like 旧表名|(like 旧表名)}</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> wang<span class="token punctuation">.</span>test <span class="token operator">like</span> SC<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、复制已有的表数据</strong></p><p>这种方式获取数据与插入数据的表结构要相同，否则会遇到插入不成功的情况，语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//insert [into] 数据表名1 [(字段列表)] select [(字段列表)] from 数据表名2;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> zhang<span class="token punctuation">.</span>shop <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> shop<span class="token punctuation">.</span>sh_goods<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若数据表中含有主键，而主键又具有唯一性，所以在数据复制时还需考虑主键冲突的问题，比如：除了主键字段之外的任意字段完成：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> mydb<span class="token punctuation">.</span>my_goods<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>keyword<span class="token punctuation">,</span>price<span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token operator">&gt;</span>content<span class="token punctuation">)</span> <span class="token keyword">select</span> category_id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>keyword<span class="token punctuation">,</span>price<span class="token punctuation">,</span>content
  <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">from</span> sh_goods<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>临时表的使用</strong></p><p>临时表是一种仅在当前会话中可见，会话关闭时自动删除的表，只需创建时加入temporary即可</p><h3 id="_5-1-2-解决主键冲突" tabindex="-1"><a class="header-anchor" href="#_5-1-2-解决主键冲突" aria-hidden="true">#</a> 5.1.2 解决主键冲突</h3>`,436),o=[t];function l(c,r){return n(),a("div",null,o)}const d=s(p,[["render",l],["__file","index.html.vue"]]);export{d as default};
